variables:
  GIT_SUBMODULE_STRATEGY: recursive
  REPOSITORY_URL: 075706292015.dkr.ecr.us-east-1.amazonaws.com/atlas
  AWS_DEFAULT_REGION: us-east-1
  CI_AWS_ECS_CLUSTER: atlas

stages:
  - test
  - build
  - reset-db
  - bidirectional-sync
  - auto-merge-request

include:
  - project: 'netops/helpers'
    ref: main
    file: '/load_sshkeys.yml'
  - template: Security/SAST.gitlab-ci.yml
  - template: Security/Dependency-Scanning.gitlab-ci.yml

gemnasium-python-dependency_scanning:
  image: registry.gitlab.com/gitlab-org/security-products/analyzers/gemnasium-python:2-python-3.9

matrix:
  image: docker:latest
  stage: build
  services:
    - docker:dind
  script:
    - apk add --no-cache curl jq aws-cli
    - $(aws ecr get-login --no-include-email --region "${AWS_DEFAULT_REGION}")
    - IMAGE_TAG="$(echo $CI_COMMIT_SHA | head -c 8)"
    - echo "Building image..."
    - docker build -t $REPOSITORY_URL:$SERVICE-latest $SERVICE
    - echo "Tagging image..."
    - docker tag $REPOSITORY_URL:$SERVICE-latest $REPOSITORY_URL:$SERVICE-$IMAGE_TAG
    - echo "Pushing image..."
    - docker push $REPOSITORY_URL:$SERVICE-latest
    - docker push $REPOSITORY_URL:$SERVICE-$IMAGE_TAG
    - aws ecs update-service --cluster $CI_AWS_ECS_CLUSTER --service $SERVICE --force-new-deployment
  parallel:
    matrix:
      - SERVICE: [hasura, flask]
  rules:
    - if: '$CI_COMMIT_BRANCH =~ /^release\/[0-9\.]+$/'
    - if: '$CI_COMMIT_BRANCH == "main"'

aws-public-db-snapshot-reset:
  stage: reset-db
  environment: db_restore
  image:
    name: amazon/aws-cli
    entrypoint: [""]
  variables:
    RDS_INSTANCE: "RDS_INSTANCE_PUBLIC"
    SNAPSHOT_NAME: "atlas_baseline_snapshot"
  script:
    - aws rds delete-db-instance \
      --db-instance-identifier ${RDS_INSTANCE} \
      --delete-automated-backups
    - aws rds restore-db-instance-from-db-snapshot \
      --db-instance-identifier ${RDS_INSTANCE} \
      --db-snapshot-identifier ${SNAPSHOT_NAME} \
      --db-instance-class db.t3.small`
  rules:
    - if: '$CI_COMMIT_BRANCH == "main" && $CI_PIPELINE_SOURCE == "schedule"'

public-main-manual-push:
  stage: bidirectional-sync
  extends: .load_sshkeys
  script:
    - apk update && apk add git && apk add openssh-client
    - ssh-keyscan github.com >> ~/.ssh/known_hosts
    - echo "$SSH_OSS_PRIVATE_KEY" | tr -d '\r' | ssh-add -
    - git config remote.open-source.url >&- || git remote add open-source $SSH_OPEN_SOURCE_URL
    - git fetch origin public-main
    - git checkout public-main
    - git push open-source public-main:main
    - git branch -D development
    - git checkout -b development
    - git branch -D public-main
  rules:
    - if: '$CI_COMMIT_BRANCH == "public-main"'
      when: manual
      allow_failure: true

open-source-main-auto-fetch:
  stage: bidirectional-sync
  extends: .load_sshkeys
  script:
    - apk update && apk add git && apk add openssh-client
    - ssh-keyscan github.com >> ~/.ssh/known_hosts
    - echo "$SSH_INTERNAL_PRIVATE_KEY" | tr -d '\r' | ssh-add -
    - echo "$SSH_OSS_PRIVATE_KEY" | tr -d '\r' | ssh-add -
    - git remote rm origin
    - git config remote.open-source.url >&- || git remote add open-source $SSH_OPEN_SOURCE_URL
    - git remote add origin $SSH_INTERNAL_URL
    - git remote -v
    - git fetch origin public-main
    - git checkout public-main
    - git fetch open-source main
    - git merge open-source/main
    - git push origin public-main
    - git fetch origin $CI_COMMIT_REF_NAME
    - git checkout $CI_COMMIT_REF_NAME
    - git branch -D public-main
  rules:
    - if: '$CI_PIPELINE_SOURCE == "schedule"'

public-main-auto-merge-request:
  # this job requires a personal access token with api scope to POST to Gitlab API
  # this personal access token belongs to the atlas repository
  before_script:
    - apk update && apk add curl
  stage: auto-merge-request
  script:
    - ./automerge-request.sh
  rules:
    - if: '$CI_COMMIT_BRANCH == "public-main" || $CI_COMMIT_BRANCH == "main"'

